source {idx_pref}kbpDatabase
{
    type     = mysql
    sql_host = {db_host}
    sql_user = {db_user}
    sql_pass = {db_pass}
    sql_db   = {db_base}
    sql_port = {mysql_port}
}


source {idx_pref}kbpArticleSource_main : {idx_pref}kbpDatabase
{
    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}kb_entry
    sql_range_step	= 100000

    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}

    sql_query = \
        SELECT \
		    CONCAT(e.id, '01'), 0 as is_deleted, e.id as entry_id, \
            e.title, body, meta_keywords, meta_description, \
            1 as source_id, e.category_id as main_category, entry_type, hits, e.private, e.author_id, e.active, \
            UNIX_TIMESTAMP(date_posted) as date_posted, UNIX_TIMESTAMP(date_updated) as date_updated, \
            IFNULL(r.votes, 0) as votes, IF(r.votes, r.rate/r.votes, 0) as rating, \
            IF(MAX(e_to_cat.category_id), 1, 0) as category_readable, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}kb_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                AND cf.id = cd.field_id \
                AND cf.active = 1 \
                AND cf.input_id IN (1,8)) as custom_text \
        FROM {tbl_pref}kb_entry e \
        LEFT JOIN ({tbl_pref}kb_entry_to_category e_to_cat, {tbl_pref}kb_category cat) \
            ON e.id = e_to_cat.entry_id \
            AND cat.id = e_to_cat.category_id \
            AND cat.private NOT IN (1,3) \
        LEFT JOIN ({tbl_pref}kb_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        LEFT JOIN {tbl_pref}kb_rating r \
            ON e.id = r.entry_id \
        WHERE e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (1, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = entry_type
    sql_attr_uint = hits
    sql_attr_uint = private
    sql_attr_uint = author_id
    sql_attr_uint = active
    sql_attr_uint = votes
    sql_attr_bool = category_readable
    sql_attr_float = rating
    sql_attr_timestamp = date_posted
    sql_attr_timestamp = date_updated

    sql_attr_multi = uint category from query; SELECT CONCAT(entry_id, '01'), category_id FROM {tbl_pref}kb_entry_to_category
    sql_attr_multi = uint visible_category from query; \
                         SELECT CONCAT(entry_id, '01'), e_to_cat.category_id \
                         FROM ({tbl_pref}kb_entry_to_category e_to_cat, {tbl_pref}kb_category c) \
                         WHERE e_to_cat.category_id = c.id \
                             AND c.active = 1
    sql_attr_multi = uint private_roles_read from query; \
                         SELECT CONCAT(e.id, '01'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}kb_entry e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 101
    sql_attr_multi = uint private_roles_write from query; \
                         SELECT CONCAT(e.id, '01'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}kb_entry e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 105
    sql_attr_multi = uint tag from query; SELECT CONCAT(entry_id, '01'), tag_id FROM {tbl_pref}tag_to_entry WHERE entry_type = 1

    sql_attr_json = custom

    sql_field_string = title
}


source {idx_pref}kbpArticleSource_delta : {idx_pref}kbpArticleSource_main
{
    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
        SELECT \
		    CONCAT(e.id, '01'), 0 as is_deleted, e.id as entry_id, \
            e.title, body, meta_keywords, meta_description, \
            1 as source_id, e.category_id as main_category, entry_type, hits, e.private, e.author_id, e.active, \
            UNIX_TIMESTAMP(date_posted) as date_posted, UNIX_TIMESTAMP(date_updated) as date_updated, \
            IFNULL(r.votes, 0) as votes, IF(r.votes, r.rate/r.votes, 0) as rating, \
            IF(MAX(e_to_cat.category_id), 1, 0) as category_readable, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
			(SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}kb_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                AND cf.id = cd.field_id \
                AND cf.active = 1 \
                AND cf.input_id IN (1,8)) as custom_text \
        FROM {tbl_pref}kb_entry e \
        LEFT JOIN ({tbl_pref}kb_entry_to_category e_to_cat, {tbl_pref}kb_category cat) \
            ON e.id = e_to_cat.entry_id \
            AND cat.id = e_to_cat.category_id \
            AND cat.private NOT IN (1,3) \
        LEFT JOIN ({tbl_pref}kb_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        LEFT JOIN {tbl_pref}kb_rating r \
            ON e.id = r.entry_id \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 1 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = 

    sql_query_killlist = \
        SELECT CONCAT(id, '01') \
        FROM {tbl_pref}kb_entry \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 1 AND action_type = 1)
}


source {idx_pref}kbpFileSource_main : {idx_pref}kbpDatabase
{
    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}file_entry
    sql_range_step	= 100000

    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}

	sql_query = \
		SELECT \
            CONCAT(e.id, '02'), 0 as is_deleted, e.id as entry_id,  \
            CONCAT_WS(" ", filename, e.title) as title, filetext as body, meta_keywords, e.description as meta_description, \
            2 as source_id, e.category_id as main_category, NULL as entry_type, NULL as hits, e.private, e.author_id, e.active, \
            UNIX_TIMESTAMP(date_posted) as date_posted, UNIX_TIMESTAMP(date_updated) as date_updated, \
            IF(MAX(e_to_cat.category_id), 1, 0) as category_readable, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}file_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                    AND cf.id = cd.field_id \
                    AND cf.active = 1 \
                    AND cf.input_id IN (1,8)) as custom_text \
		FROM {tbl_pref}file_entry e \
        LEFT JOIN ({tbl_pref}file_entry_to_category e_to_cat, {tbl_pref}file_category cat) \
            ON e.id = e_to_cat.entry_id \
            AND cat.id = e_to_cat.category_id \
            AND cat.private NOT IN (1,3) \
        LEFT JOIN ({tbl_pref}file_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        WHERE e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (2, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = entry_type
    sql_attr_uint = hits
    sql_attr_uint = private
    sql_attr_uint = author_id
    sql_attr_uint = active
    sql_attr_bool = category_readable
    sql_attr_timestamp = date_posted
    sql_attr_timestamp = date_updated

    sql_attr_multi = uint category from query; SELECT CONCAT(entry_id, '02'), category_id FROM {tbl_pref}file_entry_to_category
    sql_attr_multi = uint visible_category from query; \
                         SELECT CONCAT(entry_id, '02'), e_to_cat.category_id \
                         FROM ({tbl_pref}file_entry_to_category e_to_cat, {tbl_pref}file_category c) \
                         WHERE e_to_cat.category_id = c.id \
                             AND c.active = 1
    sql_attr_multi = uint private_roles_read from query; \
                         SELECT CONCAT(e.id, '02'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}file_entry e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 102
    sql_attr_multi = uint private_roles_write from query; \
                         SELECT CONCAT(e.id, '02'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}file_entry e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 106
    sql_attr_multi = uint tag from query; SELECT CONCAT(entry_id, '02'), tag_id FROM {tbl_pref}tag_to_entry WHERE entry_type = 2
    sql_attr_multi = uint article from query; SELECT CONCAT(attachment_id, '02'), entry_id FROM {tbl_pref}kb_attachment_to_entry WHERE attachment_type IN (1,3)

    sql_attr_json = custom

    sql_field_string = title
}


source {idx_pref}kbpFileSource_delta : {idx_pref}kbpFileSource_main
{
    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
        SELECT \
            CONCAT(e.id, '02'), 0 as is_deleted, e.id as entry_id, \
            CONCAT_WS(" ", filename, e.title) as title, filetext as body, meta_keywords, e.description as meta_description, \
            2 as source_id, e.category_id as main_category, NULL as entry_type, NULL as hits, e.private, e.author_id, e.active, \
            UNIX_TIMESTAMP(date_posted) as date_posted, UNIX_TIMESTAMP(date_updated) as date_updated, \
            IF(MAX(e_to_cat.category_id), 1, 0) as category_readable, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}file_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                    AND cf.id = cd.field_id \
                    AND cf.active = 1 \
                    AND cf.input_id IN (1,8)) as custom_text \
		FROM {tbl_pref}file_entry e \
        LEFT JOIN ({tbl_pref}file_entry_to_category e_to_cat, {tbl_pref}file_category cat) \
            ON e.id = e_to_cat.entry_id \
            AND cat.id = e_to_cat.category_id \
            AND cat.private NOT IN (1,3) \
        LEFT JOIN ({tbl_pref}file_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 2 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = 

    sql_query_killlist = \
        SELECT CONCAT(id, '02') \
        FROM {tbl_pref}file_entry \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 2 AND action_type = 1)
}


source {idx_pref}kbpNewsSource_main : {idx_pref}kbpDatabase
{
    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}news
    sql_range_step	= 100000

    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '03'), 0 as is_deleted, e.id as entry_id,  \
		    e.title, body, meta_keywords, NULL as meta_description, \
            3 as source_id, NULL as main_category, hits, private, e.author_id, e.active, \
            1 as category_readable, \
            UNIX_TIMESTAMP(date_posted) as date_posted, UNIX_TIMESTAMP(date_updated) as date_updated, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}news_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                    AND cf.id = cd.field_id \
                    AND cf.active = 1 \
                    AND cf.input_id IN (1,8)) as custom_text \
		FROM {tbl_pref}news e \
        LEFT JOIN ({tbl_pref}news_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        WHERE e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (3, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = hits
    sql_attr_uint = private
    sql_attr_uint = author_id
    sql_attr_uint = active
    sql_attr_bool = category_readable
    sql_attr_timestamp = date_posted
    sql_attr_timestamp = date_updated

    sql_attr_multi = uint category from query; SELECT NULL, NULL
    sql_attr_multi = uint visible_category from query; SELECT NULL, NULL
    sql_attr_multi = uint private_roles_read from query; \
                         SELECT CONCAT(e.id, '03'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}news e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 107
    sql_attr_multi = uint private_roles_write from query; \
                         SELECT CONCAT(e.id, '03'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}news e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 108
    sql_attr_multi = uint tag from query; SELECT CONCAT(entry_id, '03'), tag_id FROM {tbl_pref}tag_to_entry WHERE entry_type = 3

    sql_attr_json = custom

    sql_field_string = title
}


source {idx_pref}kbpNewsSource_delta : {idx_pref}kbpNewsSource_main
{
    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
        SELECT \
            CONCAT(e.id, '03'), 0 as is_deleted, e.id as entry_id, \
		    e.title, body, meta_keywords, NULL as meta_description, \
            3 as source_id, NULL as main_category, hits, private, e.author_id, e.active, \
            1 as category_readable, \
            UNIX_TIMESTAMP(date_posted) as date_posted, UNIX_TIMESTAMP(date_updated) as date_updated, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}news_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                    AND cf.id = cd.field_id \
                    AND cf.active = 1 \
                    AND cf.input_id IN (1,8)) as custom_text \
		FROM {tbl_pref}news e \
        LEFT JOIN ({tbl_pref}news_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 3 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = 

    sql_query_killlist = \
        SELECT CONCAT(id, '03') \
        FROM {tbl_pref}news \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 3 AND action_type = 1)
}


source {idx_pref}kbpFeedbackSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}feedback
    sql_range_step	= 100000

    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '20'), 0 as is_deleted, e.id as entry_id,  \
		    e.title, e.question, e.answer, e.email, \
            20 as source_id, NULL as main_category, NULL as author_id, subject_id, answered, placed, \
            UNIX_TIMESTAMP(date_posted) as date_posted, \
            UNIX_TIMESTAMP(date_answered) as date_answered, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}feedback_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                    AND cf.id = cd.field_id \
                    AND cf.active = 1 \
                    AND cf.input_id IN (1,8)) as custom_text \
		FROM {tbl_pref}feedback e \
        LEFT JOIN ({tbl_pref}feedback_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        WHERE e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (20, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = author_id
    sql_attr_uint = subject_id
    sql_attr_uint = answered
    sql_attr_uint = placed
    sql_attr_timestamp = date_posted
    sql_attr_timestamp = date_answered

    sql_attr_multi = uint category from query; SELECT NULL, NULL
    sql_attr_multi = uint private_roles_write from query; SELECT CONCAT(id, '20'), 0 FROM {tbl_pref}feedback

    sql_attr_json = custom

    sql_field_string = title
    sql_field_string = email
}


source {idx_pref}kbpFeedbackSource_delta : {idx_pref}kbpFeedbackSource_main
{
    sql_query_pre = SET group_concat_max_len = 4096
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '20'), 0 as is_deleted, e.id as entry_id,  \
		    e.title, e.question, e.answer, e.email, \
            20 as source_id, NULL as main_category, NULL as author_id, subject_id, answered, placed, \
            UNIX_TIMESTAMP(date_posted) as date_posted, \
            UNIX_TIMESTAMP(date_answered) as date_answered, \
            REPLACE( \
                '{json}', \
                'json', \
                GROUP_CONCAT( \
                    REPLACE( \
                        CONCAT( \
                            '"field": ', \
                            IF( \
                                c.input_id IN (3, 6), \
                                REPLACE('[data]', 'data', cd.data), \
                                cd.data \
                            ) \
                        ), \
                        'field', \
                        cd.field_id \
                    ) \
                ) \
            ) as custom, \
            (SELECT GROUP_CONCAT(cd.data SEPARATOR ' ') \
                FROM ({tbl_pref}feedback_custom_data cd, \
                    {tbl_pref}custom_field cf) \
                WHERE cd.entry_id = e.id \
                    AND cf.id = cd.field_id \
                    AND cf.active = 1 \
                    AND cf.input_id IN (1,8)) as custom_text \
		FROM {tbl_pref}feedback e \
        LEFT JOIN ({tbl_pref}feedback_custom_data cd, {tbl_pref}custom_field c) \
            ON cd.entry_id = e.id \
            AND c.id = cd.field_id \
            AND c.active = 1 \
            AND c.input_id NOT IN (1,8) \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 20 AND action_type = 1) \
            OR date_answered > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 20 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '20') \
        FROM {tbl_pref}feedback \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 20 AND action_type = 1) \
            OR date_answered > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 20 AND action_type = 1)
}


source {idx_pref}kbpGlossarySource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}kb_glossary
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '21'), 0 as is_deleted, e.id as entry_id,  \
		    e.phrase, e.definition as body, \
            21 as source_id, e.active, \
            UNIX_TIMESTAMP(date_updated) as date_updated \
		FROM {tbl_pref}kb_glossary e \
        WHERE e.id BETWEEN $start AND $end

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (21, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = active
    sql_attr_timestamp = date_updated

    sql_field_string = phrase
}


source {idx_pref}kbpGlossarySource_delta : {idx_pref}kbpGlossarySource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '21'), 0 as is_deleted, e.id as entry_id,  \
		    e.phrase, e.definition as body, \
            21 as source_id, e.active, \
            UNIX_TIMESTAMP(date_updated) as date_updated \
		FROM {tbl_pref}kb_glossary e \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 21 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '21') \
        FROM {tbl_pref}kb_glossary \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 21 AND action_type = 1)
}


source {idx_pref}kbpTagSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}tag
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '22'), 0 as is_deleted, e.id as entry_id, \
		    title, description as body, \
            22 as source_id, e.active, \
            UNIX_TIMESTAMP(date_posted) as date_posted, \
            COUNT(t_to_e.tag_id) AS entry_num \
		FROM {tbl_pref}tag e \
        LEFT JOIN {tbl_pref}tag_to_entry t_to_e \
            ON e.id = t_to_e.tag_id \
        WHERE e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (22, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = entry_num
    sql_attr_uint = active
    sql_attr_timestamp = date_posted

    sql_field_string = title
}


source {idx_pref}kbpTagSource_delta : {idx_pref}kbpTagSource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '22'), 0 as is_deleted, e.id as entry_id, \
		    title, description as body, \
            22 as source_id, e.active, \
            UNIX_TIMESTAMP(date_posted) as date_posted, \
            COUNT(t_to_e.tag_id) AS entry_num \
		FROM {tbl_pref}tag e \
        LEFT JOIN {tbl_pref}tag_to_entry t_to_e \
            ON e.id = t_to_e.tag_id \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 22 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
        GROUP BY e.id

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '22') \
        FROM {tbl_pref}tag \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 22 AND action_type = 1)
}


source {idx_pref}kbpUserSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}user
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '10'), 0 as is_deleted, e.id as entry_id, \
		    e.username as title, e.username, e.first_name, e.last_name, e.email, e.phone, \
            e.user_comment, e.admin_comment, \
            10 as source_id, NULL as main_category, grantor_id as author_id, company_id, e.active, \
            UNIX_TIMESTAMP(date_registered) as date_registered, \
            UNIX_TIMESTAMP(date_updated) as date_updated, \
            lastauth, \
            p.priv_name_id \
		FROM {tbl_pref}user e \
        LEFT JOIN {tbl_pref}priv p \
            ON e.id = p.user_id \
        WHERE e.id BETWEEN $start AND $end

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (10, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = author_id
    sql_attr_uint = company_id
    sql_attr_uint = priv_name_id
    sql_attr_uint = active
    sql_attr_timestamp = date_registered
    sql_attr_timestamp = date_updated
    sql_attr_timestamp = lastauth

    sql_attr_multi = uint category from query; SELECT NULL, NULL
    sql_attr_multi = uint private_roles_write from query; SELECT CONCAT(id, '10'), 0 FROM {tbl_pref}user

    sql_attr_multi = uint role_ids from query; SELECT CONCAT(user_id, '10'), role_id FROM {tbl_pref}user_to_role

    sql_field_string = title
    sql_field_string = username
    sql_field_string = last_name
}


source {idx_pref}kbpUserSource_delta : {idx_pref}kbpUserSource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '10'), 0 as is_deleted, e.id as entry_id, \
		    e.username as title, e.username, e.first_name, e.last_name, e.email, e.phone, \
            e.user_comment, e.admin_comment, \
            10 as source_id, NULL as main_category, grantor_id as author_id, company_id, e.active, \
            UNIX_TIMESTAMP(date_registered) as date_registered, \
            UNIX_TIMESTAMP(date_updated) as date_updated, \
            lastauth, \
            p.priv_name_id \
		FROM {tbl_pref}user e \
        LEFT JOIN {tbl_pref}priv p \
            ON e.id = p.user_id \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 10 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '10') \
        FROM {tbl_pref}user \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 10 AND action_type = 1)
}


source {idx_pref}kbpArticleDraftSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}entry_draft WHERE entry_type = 1
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '07'), 0 as is_deleted, e.id as entry_id, \
		    title, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:11:"date_posted";', 1), 's:4:"body";s:', -1) as body, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:16:"meta_description"', 1), '";s:13:"meta_keywords";s:', -1) as meta_keywords, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:10:"entry_type"', 1), '";s:16:"meta_description";s:', -1) as meta_description, \
            7 as source_id, NULL as main_category, e.author_id, dw1.active as active, \
            UNIX_TIMESTAMP(date_updated) as date_posted, \
            UNIX_TIMESTAMP(date_updated) as date_updated \
		FROM {tbl_pref}entry_draft e \
        LEFT JOIN ( \
            {tbl_pref}entry_draft_workflow dw1 \
            INNER JOIN ( \
                SELECT MAX(dw.id) as id, dw.draft_id FROM {tbl_pref}entry_draft_workflow dw \
                GROUP BY dw.draft_id) dw2 \
            ON dw1.id = dw2.id \
            ) ON dw1.draft_id = e.id \
        WHERE e.id BETWEEN $start AND $end \
            AND entry_type = 1

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (7, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = author_id
    sql_attr_uint = active
    sql_attr_timestamp = date_posted
    sql_attr_timestamp = date_updated

    sql_attr_multi = uint category from query; SELECT CONCAT(draft_id, '07'), category_id FROM {tbl_pref}entry_draft_to_category
    sql_attr_multi = uint private_roles_write from query; \
                         SELECT CONCAT(e.id, '07'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}entry_draft e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 103 \
						 WHERE e.entry_type = 1
    sql_attr_multi = uint assignee from query; SELECT CONCAT(draft_id, '07'), assignee_id FROM {tbl_pref}entry_draft_workflow_to_assignee

    sql_field_string = title
}


source {idx_pref}kbpArticleDraftSource_delta : {idx_pref}kbpArticleDraftSource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '07'), 0 as is_deleted, e.id as entry_id, \
		    title, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:11:"date_posted";', 1), 's:4:"body";s:', -1) as body, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:16:"meta_description"', 1), '";s:13:"meta_keywords";s:', -1) as meta_keywords, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:10:"entry_type"', 1), '";s:16:"meta_description";s:', -1) as meta_description, \
            7 as source_id, NULL as main_category, e.author_id, dw1.active as active, \
            UNIX_TIMESTAMP(date_updated) as date_posted, \
            UNIX_TIMESTAMP(date_updated) as date_updated \
		FROM {tbl_pref}entry_draft e \
        LEFT JOIN ( \
            {tbl_pref}entry_draft_workflow dw1 \
            INNER JOIN ( \
                SELECT MAX(dw.id) as id, dw.draft_id FROM {tbl_pref}entry_draft_workflow dw \
                GROUP BY dw.draft_id) dw2 \
            ON dw1.id = dw2.id \
            ) ON dw1.draft_id = e.id \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 7 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
            AND entry_type = 1

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '07') \
        FROM {tbl_pref}entry_draft \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 7 AND action_type = 1) \
            AND entry_type = 1
}


source {idx_pref}kbpFileDraftSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}entry_draft WHERE entry_type = 2
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '08'), 0 as is_deleted, e.id as entry_id, \
		    title, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:11:"description"', 1), '";s:5:"title";s:', -1) as body, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:8:"filesize"', 1), '";s:13:"meta_keywords";s:', -1) as meta_keywords, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:16:"description_full"', 1), '";s:11:"description";s:', -1) as meta_description, \
            8 as source_id, NULL as main_category, e.author_id, e.active, \
            UNIX_TIMESTAMP(date_updated) as date_posted, \
            UNIX_TIMESTAMP(date_updated) as date_updated \
		FROM {tbl_pref}entry_draft e \
        WHERE e.id BETWEEN $start AND $end \
            AND entry_type = 2

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (8, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = main_category
    sql_attr_uint = author_id
    sql_attr_uint = active
    sql_attr_timestamp = date_posted
    sql_attr_timestamp = date_updated

    sql_attr_multi = uint category from query; SELECT CONCAT(draft_id, '08'), category_id FROM {tbl_pref}entry_draft_to_category
    sql_attr_multi = uint private_roles_write from query; \
                         SELECT CONCAT(e.id, '08'), IF (du.user_value, du.user_value, 0) \
                         FROM {tbl_pref}entry_draft e \
                         LEFT JOIN {tbl_pref}data_to_user_value du \
                             ON e.id = du.data_value \
                             AND du.rule_id = 104 \
						 WHERE e.entry_type = 2
    sql_attr_multi = uint assignee from query; SELECT CONCAT(draft_id, '08'), assignee_id FROM {tbl_pref}entry_draft_workflow_to_assignee

    sql_field_string = title
}


source {idx_pref}kbpFileDraftSource_delta : {idx_pref}kbpFileDraftSource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '08'), 0 as is_deleted, e.id as entry_id, \
		    title, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:11:"description"', 1), '";s:5:"title";s:', -1) as body, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:8:"filesize"', 1), '";s:13:"meta_keywords";s:', -1) as meta_keywords, \
            SUBSTRING_INDEX(SUBSTRING_INDEX(entry_obj, '";s:16:"description_full"', 1), '";s:11:"description";s:', -1) as meta_description, \
            8 as source_id, NULL as main_category, e.author_id, e.active, \
            UNIX_TIMESTAMP(date_updated) as date_posted, \
            UNIX_TIMESTAMP(date_updated) as date_updated \
		FROM {tbl_pref}entry_draft e \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 8 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end \
            AND entry_type = 2

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '08') \
        FROM {tbl_pref}entry_draft \
        WHERE date_updated > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 8 AND action_type = 1) \
            AND entry_type = 2
}


source {idx_pref}kbpCommentSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}kb_comment
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '31'), 0 as is_deleted, e.id as entry_id, \
		    comment, \
            31 as source_id, e.active, \
			UNIX_TIMESTAMP(date_posted) as c_date_posted \
		FROM {tbl_pref}kb_comment e \
        WHERE e.id BETWEEN $start AND $end

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (31, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = active
    sql_attr_timestamp = c_date_posted

}


source {idx_pref}kbpCommentSource_delta : {idx_pref}kbpCommentSource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '31'), 0 as is_deleted, e.id as entry_id, \
		    comment, \
            31 as source_id, e.active, \
			UNIX_TIMESTAMP(date_posted) as c_date_posted \
		FROM {tbl_pref}kb_comment e \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 31 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '31') \
        FROM {tbl_pref}kb_comment \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 31 AND action_type = 1)
}


source {idx_pref}kbpRatingFeedbackSource_main : {idx_pref}kbpDatabase
{

    sql_query_range	= SELECT MIN(id), MAX(id) FROM {tbl_pref}kb_rating_feedback
    sql_range_step	= 100000

    sql_query_pre = {custom_pre_query}

	sql_query		= \
		SELECT \
            CONCAT(e.id, '32'), 0 as is_deleted, e.id as entry_id, \
		    comment, \
            32 as source_id, e.active, \
			UNIX_TIMESTAMP(date_posted) as c_date_posted \
		FROM {tbl_pref}kb_rating_feedback e \
        WHERE e.id BETWEEN $start AND $end

    sql_query_post_index = INSERT INTO {tbl_pref}log_sphinx (entry_type, action_type, exitcode) VALUES (32, 1, 1)

    sql_attr_bool = is_deleted

    sql_attr_uint = entry_id
    sql_attr_uint = source_id
    sql_attr_uint = active
    sql_attr_timestamp = c_date_posted

}


source {idx_pref}kbpRatingFeedbackSource_delta : {idx_pref}kbpRatingFeedbackSource_main
{
    sql_query_pre = {custom_pre_query}
    
    sql_query = \
		SELECT \
            CONCAT(e.id, '32'), 0 as is_deleted, e.id as entry_id, \
		    comment, \
            32 as source_id, e.active, \
			UNIX_TIMESTAMP(date_posted) as c_date_posted \
		FROM {tbl_pref}kb_rating_feedback e \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 32 AND action_type = 1) \
            AND e.id BETWEEN $start AND $end

    sql_query_post_index =

    sql_query_killlist = \
        SELECT CONCAT(id, '32') \
        FROM {tbl_pref}kb_rating_feedback \
        WHERE date_posted > (SELECT MAX(date_executed) FROM {tbl_pref}log_sphinx WHERE entry_type = 32 AND action_type = 1)
}


index {idx_pref}kbpBaseIndex {
    type = template
    morphology = {stemmer}
    index_exact_words = 1
    html_strip = 1
    html_remove_elements = style, script
    min_prefix_len = 2
    {lang_options}
    stopwords_unstemmed = 1
    stopwords = {stopwords_files}
}

index {idx_pref}kbpArticleIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpArticleSource_main
    path = {index_dir}/kbp_article_index_main
}


index {idx_pref}kbpArticleIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpArticleSource_delta
    path = {index_dir}/kbp_article_index_delta
}


index {idx_pref}kbpFileIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpFileSource_main
    path = {index_dir}/kbp_file_index_main
}


index {idx_pref}kbpFileIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpFileSource_delta
    path = {index_dir}/kbp_file_index_delta
}


index {idx_pref}kbpNewsIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpNewsSource_main
    path = {index_dir}/kbp_news_index_main
}


index {idx_pref}kbpNewsIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpNewsSource_delta
    path = {index_dir}/kbp_news_index_delta
}


index {idx_pref}kbpFeedbackIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpFeedbackSource_main
    path = {index_dir}/kbp_feedback_index_main
}


index {idx_pref}kbpFeedbackIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpFeedbackSource_delta
    path = {index_dir}/kbp_feedback_index_delta
}


index {idx_pref}kbpGlossaryIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpGlossarySource_main
    path = {index_dir}/kbp_glossary_index_main
    expand_keywords = 1
}


index {idx_pref}kbpGlossaryIndex_delta : {idx_pref}kbpGlossaryIndex_main
{
    type = plain
    source = {idx_pref}kbpGlossarySource_delta
    path = {index_dir}/kbp_glossary_index_delta
}


index {idx_pref}kbpTagIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpTagSource_main
    path = {index_dir}/kbp_tag_index_main
    expand_keywords = 1
}


index {idx_pref}kbpTagIndex_delta : {idx_pref}kbpTagIndex_main
{
    type = plain
    source = {idx_pref}kbpTagSource_delta
    path = {index_dir}/kbp_tag_index_delta
}


index {idx_pref}kbpUserIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpUserSource_main
    path = {index_dir}/kbp_user_index_main
    morphology = none
    index_exact_words = 0
    expand_keywords = 1
}


index {idx_pref}kbpUserIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpUserSource_delta
    path = {index_dir}/kbp_user_index_delta
    morphology = none
    index_exact_words = 0
    expand_keywords = 1
}


index {idx_pref}kbpArticleDraftIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpArticleDraftSource_main
    path = {index_dir}/kbp_article_draft_index_main
}


index {idx_pref}kbpArticleDraftIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpArticleDraftSource_delta
    path = {index_dir}/kbp_article_draft_index_delta
}


index {idx_pref}kbpFileDraftIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpFileDraftSource_main
    path = {index_dir}/kbp_file_draft_index_main
}


index {idx_pref}kbpFileDraftIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpFileDraftSource_delta
    path = {index_dir}/kbp_file_draft_index_delta
}


index {idx_pref}kbpCommentIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpCommentSource_main
    path = {index_dir}/kbp_comment_index_main
}


index {idx_pref}kbpCommentIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpCommentSource_delta
    path = {index_dir}/kbp_comment_index_delta
}


index {idx_pref}kbpRatingFeedbackIndex_main : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpRatingFeedbackSource_main
    path = {index_dir}/kbp_rating_feedback_index_main
}


index {idx_pref}kbpRatingFeedbackIndex_delta : {idx_pref}kbpBaseIndex
{
    type = plain
    source = {idx_pref}kbpRatingFeedbackSource_delta
    path = {index_dir}/kbp_rating_feedback_index_delta
}


index {idx_pref}kbpIndexClient
{
    type     = distributed
    local    = {idx_pref}kbpArticleIndex_main
    local    = {idx_pref}kbpArticleIndex_delta
    local    = {idx_pref}kbpFileIndex_main
    local    = {idx_pref}kbpFileIndex_delta
    local    = {idx_pref}kbpNewsIndex_main
    local    = {idx_pref}kbpNewsIndex_delta
}


index {idx_pref}kbpIndexAdmin
{
    type     = distributed
    local    = {idx_pref}kbpArticleIndex_main
    local    = {idx_pref}kbpArticleIndex_delta
    local    = {idx_pref}kbpFileIndex_main
    local    = {idx_pref}kbpFileIndex_delta
    local    = {idx_pref}kbpNewsIndex_main
    local    = {idx_pref}kbpNewsIndex_delta
    local    = {idx_pref}kbpFeedbackIndex_main
    local    = {idx_pref}kbpFeedbackIndex_delta
    local    = {idx_pref}kbpUserIndex_main
    local    = {idx_pref}kbpUserIndex_delta
    local    = {idx_pref}kbpArticleDraftIndex_main
    local    = {idx_pref}kbpArticleDraftIndex_delta
    local    = {idx_pref}kbpFileDraftIndex_main
    local    = {idx_pref}kbpFileDraftIndex_delta
}


index {idx_pref}kbpIndexAll
{
    type     = distributed
    local    = {idx_pref}kbpArticleIndex_main
    local    = {idx_pref}kbpArticleIndex_delta
    local    = {idx_pref}kbpFileIndex_main
    local    = {idx_pref}kbpFileIndex_delta
    local    = {idx_pref}kbpNewsIndex_main
    local    = {idx_pref}kbpNewsIndex_delta
    local    = {idx_pref}kbpFeedbackIndex_main
    local    = {idx_pref}kbpFeedbackIndex_delta
    local    = {idx_pref}kbpUserIndex_main
    local    = {idx_pref}kbpUserIndex_delta
    local    = {idx_pref}kbpArticleDraftIndex_main
    local    = {idx_pref}kbpArticleDraftIndex_delta
    local    = {idx_pref}kbpFileDraftIndex_main
    local    = {idx_pref}kbpFileDraftIndex_delta
    local    = {idx_pref}kbpTagIndex_main
    local    = {idx_pref}kbpTagIndex_delta
    local    = {idx_pref}kbpGlossaryIndex_main
    local    = {idx_pref}kbpGlossaryIndex_delta
    local    = {idx_pref}kbpCommentIndex_main
    local    = {idx_pref}kbpCommentIndex_delta
    local    = {idx_pref}kbpRatingFeedbackIndex_main
    local    = {idx_pref}kbpRatingFeedbackIndex_delta
}

<tmpl:system>
common
{
    json_autoconv_numbers = 1
}


indexer
{
	mem_limit		= 128M
}


searchd
{
	listen			= {sphinx_port}:mysql41
	log			    = {log_dir}/searchd.log
	query_log		= {log_dir}/query.log
	pid_file		= {dir}searchd.pid
    binlog_path     = 
}
</tmpl:system>